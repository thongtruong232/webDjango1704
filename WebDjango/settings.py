"""
Django settings for WebDjango project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import re
import environ
import logging

# Configure logging
logger = logging.getLogger(__name__)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Initialize environ
env = environ.Env()

# Đọc file .env từ thư mục gốc của project
env_path = os.path.join(BASE_DIR, '.env')
logger.info(f"Looking for .env file at: {env_path}")

if os.path.exists(env_path):
    logger.info(f"Found .env file at: {env_path}")
    env.read_env(env_path)
    logger.info("Successfully loaded .env file")
else:
    logger.warning(f".env file not found at: {env_path}")
    # Thử tìm file .env ở các vị trí khác
    alternative_paths = [
        os.path.join(BASE_DIR.parent, '.env'),
        os.path.join(os.path.dirname(BASE_DIR), '.env'),
        os.path.join(os.getcwd(), '.env')
    ]
    
    for path in alternative_paths:
        if os.path.exists(path):
            logger.info(f"Found .env file at alternative location: {path}")
            env.read_env(path)
            logger.info("Successfully loaded .env file from alternative location")
            break
    else:
        logger.error("Could not find .env file in any location")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-rcak$@*@l7r(!$rnucpdw0hvl+erbqhhbs_c=^88xzjg+&0fjj'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1', '207.148.69.229', '*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'authentication',
    'channels',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'WebDjango.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'authentication.context_processors.user_data_context'
            ],
        },
    },
]

WSGI_APPLICATION = 'WebDjango.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': str(BASE_DIR / 'db.sqlite3'),
    }
}

# Session settings
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_SECURE = False  # Set to True in production
SESSION_COOKIE_DOMAIN = None  # Set to your domain in production
SESSION_COOKIE_AGE = 3600  # 1 hour
SESSION_COOKIE_HTTPONLY = True
SESSION_SAVE_EVERY_REQUEST = True  # Save session on every request
SESSION_EXPIRE_AT_BROWSER_CLOSE = False  # Keep session alive after browser close

# CSRF settings
CSRF_COOKIE_SECURE = False  # Set to True in production
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:8000',
    'http://127.0.0.1:8000',
    'http://207.148.69.229',
    'http://207.148.69.229:8001',
    'http://207.148.69.229:81',
    'ws://207.148.69.229:8001',
    'ws://207.148.69.229:81'
]

# CORS settings
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    'http://localhost:8000',
    'http://127.0.0.1:8000',
    'http://207.148.69.229',
    'http://207.148.69.229:8001',
    'http://207.148.69.229:81',
]

# Email settings
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'elivibes0124@gmail.com'
EMAIL_HOST_PASSWORD = 'nxxr dxyg vffc kpjn'  # App Password from Gmail
DEFAULT_FROM_EMAIL = 'elivibes0124@gmail.com'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # Thư mục chứa static files đã collect
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),  # Thư mục chứa static files source
]

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Create necessary directories
os.makedirs(os.path.join(BASE_DIR, 'logs'), exist_ok=True)
os.makedirs(os.path.join(BASE_DIR, 'media'), exist_ok=True)
os.makedirs(os.path.join(BASE_DIR, 'static'), exist_ok=True)  # Tạo thư mục static source
os.makedirs(os.path.join(BASE_DIR, 'staticfiles'), exist_ok=True)  # Tạo thư mục static collected

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Login URL configuration
LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = 'login'

AUTH_USER_MODEL = 'authentication.User'


# MongoDB settings
MONGODB_URI = os.getenv('MONGODB_URI', 'mongodb+srv://admin:admin@cluster0.yosy3w4.mongodb.net/?retryWrites=true&w=majority')
MONGODB_DATABASE = os.getenv('MONGODB_DATABASE', 'mongodbCloud')
MONGODB_USERNAME = os.getenv('MONGODB_USERNAME', 'admin')
MONGODB_PASSWORD = os.getenv('MONGODB_PASSWORD', 'admin')

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Ho_Chi_Minh'

USE_I18N = True

USE_TZ = True

# Redis Configuration
REDIS_HOST = os.getenv('REDIS_HOST', '207.148.69.229')  # Mặc định là host IP
REDIS_PORT = os.getenv('REDIS_PORT', '6379')
REDIS_PASSWORD = os.getenv('REDIS_PASSWORD', 'thongtruong232')

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': f'redis://:{REDIS_PASSWORD}@{REDIS_HOST}:{REDIS_PORT}/1',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'PASSWORD': REDIS_PASSWORD,
            'SOCKET_CONNECT_TIMEOUT': 5,
            'SOCKET_TIMEOUT': 5,
            'CONNECTION_POOL_CLASS': 'redis.BlockingConnectionPool',
            'CONNECTION_POOL_CLASS_KWARGS': {
                'max_connections': 50,
                'timeout': 20
            },
            'MAX_CONNECTIONS': 1000,
            'RETRY_ON_TIMEOUT': True,
            'IGNORE_EXCEPTIONS': True,  # Bỏ qua lỗi kết nối tạm thời
        }
    }
}

# Channel layer settings
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            'hosts': [{
                'address': f'redis://:{REDIS_PASSWORD}@{REDIS_HOST}:{REDIS_PORT}/0',
                'password': REDIS_PASSWORD
            }],
            'capacity': 1500,
            'expiry': 3600,
            'group_expiry': 3600,
            'prefix': 'asgi',
            'channel_capacity': {
                'http.request': 200,
                'http.response*': 200,
                'websocket.send*': 200,
            },
            'symmetric_encryption_keys': [SECRET_KEY],  # Mã hóa dữ liệu WebSocket
        },
    },
}

# Channels Configuration
ASGI_APPLICATION = 'WebDjango.asgi.application'

# Logging settings
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
            'level': 'ERROR',  # Chỉ hiển thị lỗi
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': 'django_error.log',
            'formatter': 'verbose',
            'level': 'ERROR',  # Chỉ ghi lỗi
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'ERROR',
            'propagate': True,
        },
        'django.db.backends': {
            'handlers': ['console'],
            'level': 'ERROR',  # Tắt log database operations
            'propagate': False,
        },
        'authentication': {
            'handlers': ['console', 'file'],
            'level': 'ERROR',
            'propagate': True,
        },
    },
}

# WebSocket settings
CHANNELS_WS_PROTOCOLS = ['websocket']
CHANNELS_WS_ALLOWED_HOSTS = ['207.148.69.229', 'localhost', '127.0.0.1']
CHANNELS_WS_HEARTBEAT = 30  # seconds
CHANNELS_WS_PING_INTERVAL = 20  # seconds
CHANNELS_WS_PING_TIMEOUT = 10  # seconds
